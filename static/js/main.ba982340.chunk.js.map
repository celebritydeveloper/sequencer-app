{"version":3,"sources":["sequenceFunctions/rangeSeq.js","sequenceFunctions/partialSumSeq.js","sequenceFunctions/primeSeq.js","sequencerComponents/Sequence.js","sequencerComponents/Result.js","sequenceFunctions/generator.js","App.js","serviceWorker.js","index.js"],"names":["rangeSeq","start","step","range","current","i","push","partialSumSeq","sum","sumArray","argumentsKey","arguments","primeSeq","primes","limit","a","Sequencer","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this","react_default","createElement","className","onClick","Component","Result","sequenceList","sequences","map","result","value","methods","next","exit","generator","regenerator_default","mark","sequencer","results","args","_args","wrap","_context","prev","Array","prototype","slice","console","log","shift","length","apply","stop","App","state","gen","nextGen","bind","assertThisInitialized","loadSequence","exitSequence","firstValue","secondValue","prompt","parseInt","alert","undefined","setState","_this2","Sequence","sequencerComponents_Result","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba982340.chunk.js","sourcesContent":["const rangeSeq = function (start, step)\n{\n    let range = [];\n    let current = start;\n    for (let i = 0; i <= 10; i++ ) {\n        range.push(current);\n        current += step;\n    }\n\n    return range;\n}\n\nexport default rangeSeq;","const partialSumSeq = function () {\n    let sum = 0;\n    let sumArray = [];\n    for (let argumentsKey in arguments) {\n        sum += arguments[argumentsKey];\n        sumArray.push(sum);\n    }\n        return sumArray;\n}\n\nexport default partialSumSeq;","const primeSeq = function ()\n{\n    let primes = [];\n    for (let limit = 1; limit <= 20; limit++) {\n        let a = false;\n        for (let i = 2; i <= limit; i++) {\n            if (limit % i === 0 && i !== limit) {\n                a = true;\n            }\n        }\n        if (a === false) {\n            primes.push(limit);\n        }\n    }\n\n    return primes;\n}\n\nexport default primeSeq;","import React, { Component } from \"react\";\n\nimport rangeSeq from '../sequenceFunctions/rangeSeq';\nimport partialSumSeq from '../sequenceFunctions/partialSumSeq';\nimport primeSeq from '../sequenceFunctions/primeSeq';\n\nclass Sequencer extends Component {\n    constructor (props) {\n        super(props);\n        // this.loadSequence = this.loadSequence.bind(this);\n    }\n\n\n    render() {\n        return (\n            <div>\n                <div className=\"sequence-name\">\n                    <button onClick = {() => {this.props.onClick(partialSumSeq)}}>Partial Sum Sequence</button>\n                    <button onClick = {() => {this.props.onClick(primeSeq)}} >Prime Sequence</button>\n                    <button onClick = {() => {this.props.onClick(rangeSeq)}}>Range Sequence</button>\n                    <button >Factorial Sequence</button>\n                    <button >Fibonacci Sequence</button>\n                </div>\n            </div>\n        );\n    }\n\n};\n\nexport default Sequencer;","import React, { Component } from 'react';\n\nclass Result extends Component {\n    constructor (props) {\n        super(props);\n    }\n    render() {\n        let sequences = this.props.sequences;\n        let sequenceList = sequences.map(function (result) {\n            return <div className=\"dot\">\n                <div className=\"result-dot\">{ result.value }</div>\n             </div>\n        });\n\n        return(\n            <div>\n                <div className=\"wrapper\">\n                <div className=\"button\">\n                        <div className=\"float-left\">\n                            <button onClick={() => {this.props.methods.next()}} className=\"btn btn-success\">Next ( )</button>\n                        </div>\n\n                        <div className=\"float-right\">\n                            <button onClick={() => {this.props.methods.exit()}} className=\"btn btn-danger\">Cancel Sequence</button>\n                        </div>\n                        <div className=\"clear\"></div>\n                  {/* End of Button Container  */}  \n                </div>\n\n                {/* Results Container  */} \n                    <div className=\"result-box\">\n\n                    { sequenceList }\n                                                        \n                    {/* End of Results Container  */}   \n                    </div>\n\n                        {/* Sequence Description */} \n                        <div className=\"sequence-desc\">\n                            <p>The Fibonacci sequence is one of the most famous formulas in mathematics.\n                                Each number in the sequence is the sum of the two numbers that precede it. So, the sequence goes: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and so on.\n                                The mathematical equation describing it is Xn+2= Xn+1 + Xn</p>\n                        </div>\n\n                 {/* End of Result Wrapper  */}\n                 </div>   \n                \n            </div>\n        );\n    }\n};\n\nexport default Result;","const generator = function * (sequencer) {\n    let results;\n    let args = [...arguments];\n    console.log(args);\n    args.shift();\n    if (args.length > 0) {\n        results = sequencer.apply(null, args);\n    } else {\n        results = sequencer();\n    }\n    for (let i = 0; i < results.length; i++) {\n        yield results[i];\n    }\n}\n\nexport default generator;","import React, { Component } from 'react';\nimport './App.css';\nimport Sequencer from './sequencerComponents/Sequence.js';\nimport Result from './sequencerComponents/Result';\nimport generator from './sequenceFunctions/generator';\nimport rangeSeq from './sequenceFunctions/rangeSeq';\nimport partialSumSeq from './sequenceFunctions/partialSumSeq';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sequences: []\n    }\n    this.gen = null;\n    this.sequences = [];\n    this.nextGen = this.nextGen.bind(this);\n    this.loadSequence = this.loadSequence.bind(this);\n    this.exitSequence = this.exitSequence.bind(this);\n  }\n  \n  loadSequence(sequencer) {\n    if (this.gen === null){\n      console.log(sequencer);\n      let firstValue, secondValue;\n      switch(sequencer) {\n        case partialSumSeq:\n          firstValue = prompt(\"Please enter first value\");\n          secondValue = prompt(\"Please enter second value\");\n          this.gen = generator(sequencer,parseInt(firstValue),parseInt(secondValue));\n          break;\n        case rangeSeq:\n          firstValue = prompt(\"Please enter first value\");\n          secondValue = prompt(\"Please enter second value\");\n          this.gen = generator(sequencer,parseInt(firstValue),parseInt(secondValue));\n          break;\n        default:\n          this.gen = generator(sequencer);\n      }\n      this.nextGen()\n    }\n    else {\n      alert('A sequence is currently running');\n    }\n  }\n  nextGen(){\n    if (this.gen) {\n      // console.log(this.gen.next());\n      let value = this.gen.next();\n      if( value.value === undefined){\n        alert('Sequence out values');\n        this.exitSequence()\n      }else{\n        this.sequences.push(value);\n        this.setState({ sequences: this.sequences });  \n      }\n    } else{\n      alert('No sequence is running')\n    }\n  }\n  exitSequence() {\n    this.gen = null;\n    this.sequences = [];\n    this.setState({ sequences: this.sequences });\n    console.log('exited');\n  }\n  getSequence() {\n\n  }\n\n  render() {\n    return (\n      <div>\n\n        <div className=\"main-container\">\n          <div className=\"sequence\">\n            <Sequencer onClick={(sequencer) => {this.loadSequence(sequencer)}}/>\n          </div>\n          \n        \n          <div className=\"result\">\n            <Result sequences= { this.state.sequences } methods = {{next: this.nextGen, exit: this.exitSequence } }/>\n          </div>\n\n        {/* Main container End */}\n        </div>\n\n        <div className=\"snackbar\" id=\"snackbar\">\n          This is the snack bar\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}